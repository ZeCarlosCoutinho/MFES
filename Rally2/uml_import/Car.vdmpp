class Car
instance variables
  public driver:Driver;
  public co_driver:[CoDriver];
  public mechanics:set of (Mechanic);
  public team:[Team];
  public make:seq of (char);
  public model:seq of (char);
  public year:int;
  public bhp:nat1;
  public traction:seq of (char);
  public weight:nat1;
  public number:int;

operations
  public  setDriver : Driver ==> ()
  setDriver(drvr) ==
    (
    driver := drvr;
    )
    pre forall car in set team.cars & drvr <> car.driver
    and drvr.team = self.team
    post driver = drvr;

  public  setCoDriver : CoDriver ==> ()
  setCoDriver(co_drvr) ==
    (
    co_driver := co_drvr;
    )
    pre forall car in set team.cars & co_drvr <> car.co_driver
    and co_drvr.team = self.team
    post co_driver = co_drvr;

  public  addMechanic : Mechanic ==> ()
  addMechanic(mechanic) ==
    (
    mechanics := mechanics union {mechanic};
    )
    pre forall car in set team.cars & 
    (if car <> self then mechanic not in set car.mechanics else true) and
    self.team = mechanic.team
    post mechanic in set mechanics;
    

  public  Car : seq of (char) * seq of (char) * int * int * seq of (char) * int * Team * int ==> Car
  Car(mk, mdl, yr, hp, trc, wght, tm, nmb) ==
    (
    make := mk;
    model := mdl;
    year := yr;
    bhp := hp;
    traction := trc;
    weight := wght;
    team := nil; --Necessary because of preconditions
    tm.addExistingCar(self);
    team := tm;
    number := nmb;
    mechanics := {};
    return self;
    )
    pre forall car in set tm.cars & car.number <> nmb;


end Car
