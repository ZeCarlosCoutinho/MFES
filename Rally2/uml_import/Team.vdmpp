class Team
instance variables
  public team_members:set of (TeamMember);
  public cars:set of (Car);
  public manager:Manager;
  public sponsors:set of (Sponsor);
  public events:set of (Event);
  public name:seq of (char);

operations
  public  Team : seq of (char) * Manager ==> Team
  Team(nm, mngr) ==
    (
    name := nm;
    events := {};
    sponsors := {};
    cars := {};
    team_members := {mngr};
    manager := mngr;
    );

  public  addDriver : seq of (char) * seq of (char) ==> ()
  addDriver(nm, nati) ==
    (
    dcl driver : Driver := new Driver(nm, nati);
    team_members := team_members union {driver};
    )
    post getMember(nm) in set team_members;
  

  public  addCoDriver : seq of (char) * seq of (char) ==> ()
  addCoDriver(nm, nati) ==
    (
    dcl co_driver : CoDriver := new CoDriver(nm, nati);
    team_members := team_members union {co_driver};
    );


  public  addMechanic : seq of (char) * seq of (char) ==> ()
  addMechanic(nm, nati) ==
    (
    dcl mechanic : Mechanic := new Mechanic(nm, nati);
    team_members := team_members union {mechanic};
    );


  public  addCar : seq of (char) * seq of (char) * int * int * seq of (char) * int ==> ?
  addCar(make, model, year, bhp, traction, weight) ==
    is not yet specified;

  public  assignDriver : Car * Driver ==> ?
  assignDriver(car, member) ==
    is not yet specified;

  public  assignCoDriver : Car * CoDriver ==> ?
  assignCoDriver(car, co_driver) ==
    is not yet specified;

  public  assignMechanic : Car * Mechanic ==> ?
  assignMechanic(car, mechanic) ==
    is not yet specified;

  public  getEventResults : ()  ==> ?
  getEventResults() ==
    is not yet specified;

  public  addManager : seq of (char) * seq of (char) ==> ?
  addManager(nm, nati) ==
    is not yet specified;

  public pure  getCar : int ==> [Car]
  getCar(n) ==
    (
		dcl ret_car:[Car] := nil;
		
		for all car in set cars do
			if car.number = n
			then return car;
		return ret_car;
		)
		pre cars <> {}
		post RESULT in set cars or RESULT = nil;

  public pure  getMember : seq of (char) ==> [TeamMember]
  getMember(nm) ==
    (
		dcl ret_member:[TeamMember] := nil;
		
		for all member in set team_members do
			if member.name = nm
			then return member;
		return ret_member;
		)
		pre team_members <> {}
		post RESULT in set team_members or RESULT = nil;
	
end Team
