class AtoB is subclass of Event
instance variables
  public round:seq of (Round);

operations
	--
	-- Adds a car's Round result to the AtoB event
	--
  public  addRound : Car * nat1 * Date ==> ()
  addRound(car, round_time, date) ==
    (
    	dcl newRound : Round := new Round(round_time, date, car);
    	round := round ^ [newRound];
    )
    pre car <> undefined 
    	and round_time <> undefined
    	and date <> undefined
    	and car.team in set teams
    post getRound(car, date) in set elems round;

	-- 
	-- Gets the Round results of a car
	--
  public  getCarRounds : [Car] ==> seq of Round
  getCarRounds(car) ==
  (
  	dcl car_rounds : seq of (Round) := [];
  
  	for n = 1 to len self.round do
  	(
  		if self.round(n).car = car 
  			then car_rounds := car_rounds ^ [self.round(n)];
  	);
  		
  	return car_rounds;
  )
  pre car <> nil;

	--
	-- Sorts the Rounds by time
	--
  public  sortRounds : ()  ==> ()
  sortRounds() ==
  (
  	SelectionSortResults(1);
  );
  --TODO Do the post condition, to check if x.round_time > x+1.round_time

  public getFinalResults : ()  ==> seq of Round
  getFinalResults() ==
  (
  	dcl result : seq of Round := [];
  	dcl not_in_results : bool := true;
  
  	sortRounds();
  	for n = 1 to len round do
  	(
  		not_in_results := true;
  		for m = 1 to len result do
  			if result(m).car = round(n).car
  			then not_in_results := false;
  		if not_in_results
  		then result := result ^ [round(n)];
  	);
  	
  	return result;
  )
  pre len round > 0;

  public  AtoB : seq of (char) * seq of (char) * Date * Date==> AtoB
  AtoB(nm, loc, beginning_d, end_d) ==
  (
    teams := {};
    beginning_date := beginning_d;
  	end_date := end_d;
  	name := nm;
  	location := loc;
  	round := [];
  	return self;
   )
   pre beginning_d.isbefore(end_d);
   
   public pure getRound : [Car] * [Date] ==> [Round]
   getRound(car, date) ==
   (
   	 for all rnd in set elems round do
   	 	if rnd.car = car and rnd.date = date
   	 	then return rnd;
   	 return nil; --When no Round is found
   )
   pre car <> nil and date <> nil;
   
  SelectionSortResults : nat ==> ()
	SelectionSortResults (i) ==
		if i < len round
		then (dcl temp: Round;
		dcl mi : nat := min_index(round(i,...,len round)) + i - 1;
		temp := round(mi);
		round(mi) := round(i);
		round(i) := temp;
		SelectionSortResults(i+1)
	);

functions
	min_index : seq1 of Round -> nat
	min_index(l) ==
	if len l = 1
	then 1
	else let mi = min_index(tl l)
	in if l(mi+1).round_time < l(1).round_time
	then mi+1
	else 1;
	
	--isSorted : seq of Round -> bool
	--isSorted(rnds) ==
	--	let ind in seq rnds be st
		--	forall ind' in set inds rnds
		--		& (ind' > ind and rnds(ind').round_time >= rnds(ind).round_time)
		--		in; 


end AtoB
