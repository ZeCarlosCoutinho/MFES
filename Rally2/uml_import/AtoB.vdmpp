class AtoB is subclass of Event
instance variables
  public round:seq of (Round);

operations

	-- Adds a car's Round result to the AtoB event
  public  addRound : Car * int * Date ==> ()
  addRound(car, round_time, date) ==
    (
    	dcl newRound : Round := new Round(round_time, date, car);
    	round := round ^ [newRound];
    )
    pre car <> undefined 
    	and round_time <> undefined
    	and date <> undefined
    post getRound(car, date) in set elems round;

	-- Gets the Round results of a car
  public  getCarRounds : [Car] ==> seq of Round
  getCarRounds(car) ==
  (
  	dcl car_rounds : seq of (Round) := [];
  
  	for n = 1 to len self.round do
  	(
  		if self.round(n).car = car 
  			then car_rounds := car_rounds ^ [self.round(n)];
  	);
  		
  	return car_rounds;
  )
  pre car <> nil;

  public  sortRounds : ()  ==> ?
  sortRounds() ==
    is not yet specified;

  public  getFinalResults : ()  ==> Round
  getFinalResults() ==
    is not yet specified;

  public  AtoB : seq of (char) * seq of (char) * Date * Date==> AtoB
  AtoB(nm, loc, beginning_d, end_d) ==
  (
    teams := {};
    beginning_date := beginning_d;
  	end_date := end_d;
  	name := nm;
  	location := loc;
  	round := [];
  	return self;
   );
   
   public pure getRound : [Car] * [Date] ==> Round
   getRound(car, date) ==
   (
   	 for all rnd in set elems round do
   	 	if rnd.car = car and rnd.date = date
   	 	then return rnd;
   	 return undefined; --When no Round is found
   )
   pre car <> nil and date <> nil;


end AtoB
