class AtoBTest is subclass of TestCase
operations
	public testAddRound: () ==> ()
	testAddRound() ==
	(
		dcl date : Date := new Date(2017, 12, 28, 19, 30, 00);
		dcl end_date : Date := new Date(2017, 12, 31, 20, 0 , 0);
		dcl manager : Manager := new Manager("Ezio Auditore", "Italian");
		dcl team : Team := new Team("The Creed", manager);
		dcl car : Car := new Car("Ford", "Fiesta", 2002, 500, "4wd", 1000, team, 1);
		dcl round_time : int := 6600;
		
		dcl atob : AtoB := new AtoB("Super Mario Mountain Climb", "Italy", date, end_date);
		dcl round : Round := new Round(round_time, date, car);
		
		atob.addRound(car, round_time, date);
		assertTrue(round.isequal(atob.round(1)));
	);
	
	public testGetCarRounds: () ==> ()
	testGetCarRounds() ==
	(
		dcl date1 : Date := new Date(2017, 12, 28, 19, 30, 00);
		dcl date2 : Date := new Date(2017, 12, 28, 20, 30, 00);
		dcl end_date : Date := new Date(2017, 12, 31, 20, 0 , 0);
		dcl manager : Manager := new Manager("Ezio Auditore", "Italian");
		dcl team : Team := new Team("The Creed", manager);
		dcl car1 : Car := new Car("Ford", "Fiesta", 2002, 500, "4wd", 1000, team, 1);
		dcl car2 : Car := new Car("Citroen", "Xsara", 2000, 450, "4wd", 1450, team, 2);
		dcl round_time1 : int := 6600;
		dcl round_time2: int := 7000;
		dcl round_time3: int := 6650;
		
		dcl atob : AtoB := new AtoB("Super Mario Mountain Climb", "Italy", date1, end_date);
		
		dcl result : seq of Round;
		
		atob.addRound(car1, round_time1, date1);
		atob.addRound(car2, round_time2, date1);
		atob.addRound(car1, round_time3, date2);
		
		result := atob.getCarRounds(car1);
		assertTrue(len result = 2);
		assertTrue(result(1).isequal(atob.round(1)));
		assertTrue(result(2).isequal(atob.round(3)));
	);
	
	-- TODO: Insert the rounds manually. If addRound fails, this test fails too
	public testSortRounds: () ==> ()
	testSortRounds()==
	(
		dcl date1 : Date := new Date(2017, 12, 28, 19, 30, 00);
		dcl date2 : Date := new Date(2017, 12, 28, 20, 30, 00);
		dcl end_date : Date := new Date(2017, 12, 31, 20, 0 , 0);
		dcl manager : Manager := new Manager("Ezio Auditore", "Italian");
		dcl team : Team := new Team("The Creed", manager);
		dcl car1 : Car := new Car("Ford", "Fiesta", 2002, 500, "4wd", 1000, team, 1);
		dcl car2 : Car := new Car("Citroen", "Xsara", 2000, 450, "4wd", 1450, team, 2);
		dcl round_time1 : int := 6600;
		dcl round_time2: int := 7000;
		dcl round_time3: int := 6650;
		dcl round_time4: int := 5505;
		
		dcl atob : AtoB := new AtoB("Super Mario Mountain Climb", "Italy", date1, end_date);
		dcl round1 : Round := new Round(round_time1, date1, car1);
		dcl round2 : Round := new Round(round_time2, date1, car2);
		dcl round3 : Round := new Round(round_time3, date2, car1);
		dcl round4 : Round := new Round(round_time4, date2, car2);
				
		atob.addRound(car1, round_time1, date1);
		atob.addRound(car2, round_time2, date1);
		atob.addRound(car1, round_time3, date2);
		atob.addRound(car2, round_time4, date2);
		
		atob.sortRounds();
		assertTrue(len atob.round = 4);
		assertTrue(round1.isequal(atob.round(2)));
		assertTrue(round2.isequal(atob.round(4)));
		assertTrue(round3.isequal(atob.round(3)));
		assertTrue(round4.isequal(atob.round(1)));
		
	);
	
	public testGetFinalRounds: () ==> ()
	testGetFinalRounds() ==
	(
		dcl date1 : Date := new Date(2017, 12, 28, 19, 30, 00);
		dcl end_date : Date := new Date(2017, 12, 31, 20, 0 , 0);
		dcl manager1 : Manager := new Manager("Ezio Auditore", "Italian");
		dcl manager2 : Manager := new Manager("Il Padrino", "Italian");		
		dcl team1 : Team := new Team("The Creed", manager1);
		dcl team2 : Team := new Team("The Templars", manager2);
		dcl car1 : Car := new Car("Ford", "Fiesta", 2002, 500, "4wd", 1000, team1, 1);
		dcl car2 : Car := new Car("Citroen", "Xsara", 2000, 450, "4wd", 1450, team1, 2);
		dcl car3 : Car := new Car("Fiat", "Punto", 1999, 300, "2wd", 900, team2, 3);
		dcl round_time1 : int := 6600;
		dcl round_time2: int := 7000;
		dcl round_time3: int := 6650;
		dcl round_time4: int := 5505;
		dcl round_time5: int := 4500;
		dcl round_time6: int := 6690;
		
		dcl atob : AtoB := new AtoB("Super Mario Mountain Climb", "Italy", date1, end_date);
		dcl round1 : Round := new Round(round_time1, date1, car1);
		dcl round2 : Round := new Round(round_time2, date1, car2);
		dcl round3 : Round := new Round(round_time3, date1, car3);
		dcl round4 : Round := new Round(round_time4, date1, car1);
		dcl round5 : Round := new Round(round_time5, date1, car2);
		dcl round6 : Round := new Round(round_time6, date1, car3);
		
		dcl results : seq of Round;
		
		atob.round := [round1, round2, round3, round4, round5, round6];
		
		results := atob.getFinalResults();
		assertTrue(len results = 3);
		assertTrue(results(1) = round5);
		assertTrue(results(2) = round4);
		assertTrue(results(3) = round3);
	);
	
	public testGetRound: () ==> ()
	testGetRound() ==
	(
		dcl date1 : Date := new Date(2017, 12, 28, 19, 30, 00);
		dcl date2 : Date := new Date(2017, 12, 28, 19, 35, 00);
		dcl date3 : Date := new Date(2017, 12, 28, 19, 40, 00);
		dcl date4 : Date := new Date(2017, 12, 28, 19, 45, 00);
		dcl date5 : Date := new Date(2017, 12, 28, 19, 50, 00);
		dcl date6 : Date := new Date(2017, 12, 28, 19, 55, 00);
		
		
		
		
		dcl end_date : Date := new Date(2017, 12, 31, 20, 0 , 0);
		dcl manager1 : Manager := new Manager("Ezio Auditore", "Italian");
		dcl manager2 : Manager := new Manager("Il Padrino", "Italian");		
		dcl team1 : Team := new Team("The Creed", manager1);
		dcl team2 : Team := new Team("The Templars", manager2);
		dcl car1 : Car := new Car("Ford", "Fiesta", 2002, 500, "4wd", 1000, team1, 1);
		dcl car2 : Car := new Car("Citroen", "Xsara", 2000, 450, "4wd", 1450, team1, 2);
		dcl car3 : Car := new Car("Fiat", "Punto", 1999, 300, "2wd", 900, team2, 3);
		
		dcl round_time1 : int := 6600;
		dcl round_time2: int := 7000;
		dcl round_time4: int := 5505;
		dcl round_time5: int := 4500;
		
		dcl atob : AtoB := new AtoB("Super Mario Mountain Climb", "Italy", date1, end_date);
		dcl round1 : Round := new Round(round_time1, date1, car1);
		dcl round2 : Round := new Round(round_time2, date2, car2);
		dcl round4 : Round := new Round(round_time4, date4, car1);
		dcl round5 : Round := new Round(round_time5, date5, car2);
		
		atob.round := [round1, round2, round4, round5];
		
		assertTrue(atob.getRound(car1, date1) = round1);
		assertTrue(atob.getRound(car2, date2) = round2);
		assertTrue(atob.getRound(car1, date4) = round4);
		assertTrue(atob.getRound(car2, date5) = round5);
		assertTrue(atob.getRound(car3, date3) = nil);
		assertTrue(atob.getRound(car3, date6) = nil);
	);
	
end AtoBTest